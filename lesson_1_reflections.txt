How did viewing a diff between two versions of a file help you see the bug that was introduced?
Well, it helped me a lot. Instead of comparing the whole files, I just had to compare 1 line of code.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
It can make much more faster to trace the mistakes (bugs).

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros are that we avoid a lot of unnecessary saves with minor changes which sometimes aren't logical changes.
As a con is always the chance that the user may forget to commit after a logical change is done.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Well since in programming one file usually uses other files, it makes more sene to have a snapshot of all the files that are "related" to each other (are in the same package-repository).

How can you use the commands git log and git diff to view the history of files?
We use git log to review the commit history, where each commit has a unique ID, and, we se git diff to check the differences between two versions by putting two commit IDs after the git diff command.

How might using version control make you more confident to make changes that could break something?
Since I will be sure that I can go back to any snapshoot or commit that I did before.

Now that you have your workspace set up, what do you want to try using Git for?
Now I would like to use git in any project that I will be working from now on.